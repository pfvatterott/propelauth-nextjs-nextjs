{"version":3,"sources":["../../../src/server/app-router-index.ts","../../../src/server/exceptions.ts","../../../src/server/app-router.ts","../../../src/loginMethod.ts","../../../src/user.ts","../../../src/server/shared.ts","../../../src/shared.ts"],"sourcesContent":["export { UnauthorizedException, ConfigurationException } from './exceptions'\nexport {\n    getRouteHandlers,\n    getUser,\n    getUserOrRedirect,\n    getAccessToken,\n    authMiddleware,\n    getCurrentUrl,\n} from './app-router'\nexport type { RouteHandlerArgs, RedirectOptions } from './app-router'\n","export class UnauthorizedException extends Error {\n    readonly message: string\n    readonly status: number\n\n    constructor(message: string) {\n        super(message)\n        this.message = message\n        this.status = 401\n    }\n}\n\nexport class ConfigurationException extends Error {\n    readonly message: string\n    readonly status: number\n\n    constructor(message: string) {\n        super(message)\n        this.message = message\n        this.status = 500\n    }\n}\n","import { redirect } from 'next/navigation.js'\nimport { cookies, headers } from 'next/headers.js'\nimport { NextRequest, NextResponse } from 'next/server.js'\nimport {\n    ACCESS_TOKEN_COOKIE_NAME,\n    CALLBACK_PATH,\n    COOKIE_OPTIONS,\n    CUSTOM_HEADER_FOR_ACCESS_TOKEN,\n    CUSTOM_HEADER_FOR_URL,\n    getAuthUrlOrigin,\n    getIntegrationApiKey,\n    getRedirectUri,\n    LOGIN_PATH,\n    LOGOUT_PATH,\n    REFRESH_TOKEN_COOKIE_NAME,\n    refreshTokenWithAccessAndRefreshToken,\n    RETURN_TO_PATH_COOKIE_NAME,\n    STATE_COOKIE_NAME,\n    USERINFO_PATH,\n    validateAccessToken,\n    validateAccessTokenOrUndefined,\n} from './shared'\nimport { UserFromToken } from './index'\nimport { ACTIVE_ORG_ID_COOKIE_NAME } from '../shared'\n\nexport type RedirectOptions = {\n    returnToPath: string\n    returnToCurrentPath?: never\n} | {\n    returnToPath?: never\n    returnToCurrentPath: boolean\n}\n\nexport async function getUserOrRedirect(redirectOptions?: RedirectOptions): Promise<UserFromToken> {\n    const user = await getUser()\n    if (user) {\n        return user\n    } else {\n        redirectToLogin(redirectOptions)\n        throw new Error('Redirecting to login')\n    }\n}\n\nexport async function getUser(): Promise<UserFromToken | undefined> {\n    const accessToken = getAccessToken()\n    if (accessToken) {\n        const user = await validateAccessTokenOrUndefined(accessToken)\n        if (user) {\n            return user\n        }\n    }\n    return undefined\n}\n\nexport function getAccessToken(): string | undefined {\n    return headers().get(CUSTOM_HEADER_FOR_ACCESS_TOKEN) || cookies().get(ACCESS_TOKEN_COOKIE_NAME)?.value\n}\n\n// Purpose of this middleware is just to keep the access token cookie alive\n// In an ideal world, this could be done in `getUser`, however, you can't\n//   set a cookie in a server component.\n// There also doesn't seem to be any way right now to set a cookie in a\n//   middleware and pass it forward (you can only set them on the response).\n// You CAN, however, pass in custom headers,\n//   so we'll use CUSTOM_HEADER_FOR_ACCESS_TOKEN as a workaround\nexport async function authMiddleware(req: NextRequest): Promise<Response> {\n    if (req.headers.has(CUSTOM_HEADER_FOR_ACCESS_TOKEN)) {\n        throw new Error(`${CUSTOM_HEADER_FOR_ACCESS_TOKEN} is set which is for internal use only`)\n    } else if (req.headers.has(CUSTOM_HEADER_FOR_URL)) {\n        throw new Error(`${CUSTOM_HEADER_FOR_URL} is set which is for internal use only`)\n    } else if (\n        req.nextUrl.pathname === CALLBACK_PATH ||\n        req.nextUrl.pathname === LOGOUT_PATH ||\n        req.nextUrl.pathname === USERINFO_PATH\n    ) {\n        // Don't do anything for the callback, logout, or userinfo paths, as they will modify the cookies themselves\n        return getNextResponse(req)\n    }\n\n    const accessToken = req.cookies.get(ACCESS_TOKEN_COOKIE_NAME)?.value\n    const refreshToken = req.cookies.get(REFRESH_TOKEN_COOKIE_NAME)?.value\n    const activeOrgId = req.cookies.get(ACTIVE_ORG_ID_COOKIE_NAME)?.value\n\n    // If we are authenticated, we can continue\n    if (accessToken) {\n        const user = await validateAccessTokenOrUndefined(accessToken)\n        if (user) {\n            return getNextResponse(req)\n        }\n    }\n\n    // Otherwise, we need to refresh the access token\n    if (refreshToken) {\n        const response = await refreshTokenWithAccessAndRefreshToken(refreshToken, activeOrgId)\n        if (response.error === 'unexpected') {\n            throw new Error('Unexpected error while refreshing access token')\n        } else if (response.error === 'unauthorized') {\n            const response = getNextResponse(req)\n            response.cookies.delete(ACCESS_TOKEN_COOKIE_NAME)\n            response.cookies.delete(REFRESH_TOKEN_COOKIE_NAME)\n            return response\n        } else {\n            const nextResponse = getNextResponse(req, response.accessToken)\n            nextResponse.cookies.set(ACCESS_TOKEN_COOKIE_NAME, response.accessToken, COOKIE_OPTIONS)\n            nextResponse.cookies.set(REFRESH_TOKEN_COOKIE_NAME, response.refreshToken, COOKIE_OPTIONS)\n            return nextResponse\n        }\n    }\n\n    return getNextResponse(req)\n}\n\nfunction getNextResponse(request: NextRequest, newAccessToken?: string) {\n    const headers = new Headers(request.headers)\n    headers.set(CUSTOM_HEADER_FOR_URL, request.nextUrl.toString())\n    if (newAccessToken) {\n        headers.set(CUSTOM_HEADER_FOR_ACCESS_TOKEN, newAccessToken)\n    }\n    return NextResponse.next({\n        request: {\n            headers,\n        },\n    })\n}\n\nexport type RouteHandlerArgs = {\n    postLoginRedirectPathFn?: (req: NextRequest) => string\n    getDefaultActiveOrgId?: (req: NextRequest, user: UserFromToken) => string | undefined\n}\n\nexport function getRouteHandlers(args?: RouteHandlerArgs) {\n    function loginGetHandler(req: NextRequest) {\n        return signupOrLoginHandler(req, false)\n    }\n\n    function signupGetHandler(req: NextRequest) {\n        return signupOrLoginHandler(req, true)\n    }\n\n    function signupOrLoginHandler(req: NextRequest, isSignup: boolean) {\n        const returnToPath = req.nextUrl.searchParams.get('return_to_path')\n        const state = randomState()\n        const redirectUri = getRedirectUri()\n\n        const authorizeUrlSearchParams = new URLSearchParams({\n            redirect_uri: redirectUri,\n            state,\n            signup: isSignup ? 'true' : 'false',\n        })\n        const authorize_url = getAuthUrlOrigin() + '/propelauth/ssr/authorize?' + authorizeUrlSearchParams.toString()\n\n        const headers = new Headers()\n        headers.append('Location', authorize_url)\n        headers.append('Set-Cookie', `${STATE_COOKIE_NAME}=${state}; Path=/; HttpOnly; Secure; SameSite=Lax`)\n        if (returnToPath) {\n            if (returnToPath.startsWith('/')) {\n                headers.append(\n                    'Set-Cookie',\n                    `${RETURN_TO_PATH_COOKIE_NAME}=${returnToPath}; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=600`\n                )\n            } else {\n                console.warn('return_to_path must start with /')\n            }\n        }\n\n        return new Response(null, {\n            status: 302,\n            headers,\n        })\n    }\n\n    async function callbackGetHandler(req: NextRequest) {\n        const oauthState = req.cookies.get(STATE_COOKIE_NAME)?.value\n        if (!oauthState || oauthState.length !== 64) {\n            return new Response(null, { status: 302, headers: { Location: LOGIN_PATH } })\n        }\n\n        const queryParams = req.nextUrl.searchParams\n        const state = queryParams.get('state')\n        const code = queryParams.get('code')\n        if (state !== oauthState) {\n            return new Response(null, { status: 302, headers: { Location: LOGIN_PATH } })\n        }\n\n        const authUrlOrigin = getAuthUrlOrigin()\n        const redirectUri = getRedirectUri()\n        const integrationApiKey = getIntegrationApiKey()\n        const oauth_token_body = {\n            redirect_uri: redirectUri,\n            code,\n        }\n        const url = `${authUrlOrigin}/propelauth/ssr/token`\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(oauth_token_body),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + integrationApiKey,\n            },\n        })\n\n        if (response.ok) {\n            const data = await response.json()\n\n            const accessToken = data.access_token\n\n            // If we have a return_to_path cookie, we'll use that\n            // Otherwise, we'll use the postLoginRedirectPathFn\n            const returnToPathFromCookie = req.cookies.get(RETURN_TO_PATH_COOKIE_NAME)?.value\n            const returnToPath =\n                returnToPathFromCookie ?? (args?.postLoginRedirectPathFn ? args.postLoginRedirectPathFn(req) : '/')\n            if (!returnToPath) {\n                console.error('postLoginRedirectPathFn returned undefined')\n                return new Response('Unexpected error', { status: 500 })\n            }\n\n            // For Active Org, if there is one set, we need to issue a new access token\n            // We start by checking if there's an existing cookie AND the user is in that org\n            // Otherwise, we'll use the default active org function to get the active org\n            // If none of that, we'll just use the access token as is\n            const currentActiveOrgId = req.cookies.get(ACTIVE_ORG_ID_COOKIE_NAME)?.value\n\n            const user = await validateAccessToken(accessToken)\n            const isUserInCurrentActiveOrg = !!currentActiveOrgId && !!user.getOrg(currentActiveOrgId)\n\n            let activeOrgId = undefined\n            if (isUserInCurrentActiveOrg) {\n                activeOrgId = currentActiveOrgId\n            } else if (args?.getDefaultActiveOrgId) {\n                activeOrgId = args.getDefaultActiveOrgId(req, user)\n            }\n\n            // If there's an active org, we need to re-issue a new access token for the active org\n            if (activeOrgId) {\n                const response = await refreshTokenWithAccessAndRefreshToken(data.refresh_token, activeOrgId)\n                if (response.error === 'unexpected') {\n                    throw new Error('Unexpected error while setting active org')\n                } else if (response.error === 'unauthorized') {\n                    console.error(\n                        'Unauthorized error while setting active org. Your user may not have access to this org'\n                    )\n                    return new Response('Unauthorized', { status: 401 })\n                } else {\n                    const headers = new Headers()\n                    headers.append('Location', returnToPath)\n                    headers.append(\n                        'Set-Cookie',\n                        `${ACCESS_TOKEN_COOKIE_NAME}=${response.accessToken}; Path=/; HttpOnly; Secure; SameSite=Lax`\n                    )\n                    headers.append(\n                        'Set-Cookie',\n                        `${REFRESH_TOKEN_COOKIE_NAME}=${response.refreshToken}; Path=/; HttpOnly; Secure; SameSite=Lax`\n                    )\n                    headers.append(\n                        'Set-Cookie',\n                        `${ACTIVE_ORG_ID_COOKIE_NAME}=${activeOrgId}; Path=/; HttpOnly; Secure; SameSite=Lax`\n                    )\n                    headers.append(\n                        'Set-Cookie',\n                        `${RETURN_TO_PATH_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n                    )\n                    return new Response(null, {\n                        status: 302,\n                        headers,\n                    })\n                }\n            }\n\n            const headers = new Headers()\n            headers.append('Location', returnToPath)\n            headers.append(\n                'Set-Cookie',\n                `${ACCESS_TOKEN_COOKIE_NAME}=${accessToken}; Path=/; HttpOnly; Secure; SameSite=Lax`\n            )\n            headers.append(\n                'Set-Cookie',\n                `${REFRESH_TOKEN_COOKIE_NAME}=${data.refresh_token}; Path=/; HttpOnly; Secure; SameSite=Lax`\n            )\n            headers.append(\n                'Set-Cookie',\n                `${ACTIVE_ORG_ID_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n            )\n            headers.append(\n                'Set-Cookie',\n                `${RETURN_TO_PATH_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n            )\n            return new Response(null, {\n                status: 302,\n                headers,\n            })\n        } else if (response.status === 401) {\n            console.error(\n                \"Couldn't finish the login process for this user. This is most likely caused by an incorrect PROPELAUTH_API_KEY.\"\n            )\n            return new Response('Unexpected error', { status: 500 })\n        } else {\n            return new Response('Unexpected error', { status: 500 })\n        }\n    }\n\n    async function userinfoGetHandler(req: NextRequest) {\n        const oldRefreshToken = req.cookies.get(REFRESH_TOKEN_COOKIE_NAME)?.value\n        const activeOrgId = req.cookies.get(ACTIVE_ORG_ID_COOKIE_NAME)?.value\n\n        // For the userinfo endpoint, we want to get the most up-to-date info, so we'll refresh the access token\n        if (oldRefreshToken) {\n            const refreshResponse = await refreshTokenWithAccessAndRefreshToken(oldRefreshToken, activeOrgId)\n            if (refreshResponse.error === 'unexpected') {\n                throw new Error('Unexpected error while refreshing access token')\n            } else if (refreshResponse.error === 'unauthorized') {\n                const headers = new Headers()\n                headers.append(\n                    'Set-Cookie',\n                    `${ACCESS_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n                )\n                headers.append(\n                    'Set-Cookie',\n                    `${REFRESH_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n                )\n                headers.append(\n                    'Set-Cookie',\n                    `${ACTIVE_ORG_ID_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n                )\n                return new Response('Unauthorized', { status: 401, headers })\n            }\n\n            const refreshToken = refreshResponse.refreshToken\n            const accessToken = refreshResponse.accessToken\n\n            const authUrlOrigin = getAuthUrlOrigin()\n            const path = `${authUrlOrigin}/propelauth/oauth/userinfo`\n            const response = await fetch(path, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: 'Bearer ' + accessToken,\n                },\n            })\n            if (response.ok) {\n                const userFromToken = await validateAccessToken(accessToken)\n                const data = await response.json()\n                const jsonResponse = {\n                    userinfo: data,\n                    accessToken,\n                    impersonatorUserId: userFromToken.impersonatorUserId,\n                    activeOrgId,\n                }\n\n                const headers = new Headers()\n                headers.append(\n                    'Set-Cookie',\n                    `${ACCESS_TOKEN_COOKIE_NAME}=${accessToken}; Path=/; HttpOnly; Secure; SameSite=Lax`\n                )\n                headers.append(\n                    'Set-Cookie',\n                    `${REFRESH_TOKEN_COOKIE_NAME}=${refreshToken}; Path=/; HttpOnly; Secure; SameSite=Lax`\n                )\n                headers.append('Content-Type', 'application/json')\n                return new Response(JSON.stringify(jsonResponse), {\n                    status: 200,\n                    headers,\n                })\n            } else if (response.status === 401) {\n                const headers = new Headers()\n                headers.append(\n                    'Set-Cookie',\n                    `${ACCESS_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n                )\n                headers.append(\n                    'Set-Cookie',\n                    `${REFRESH_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n                )\n                headers.append(\n                    'Set-Cookie',\n                    `${ACTIVE_ORG_ID_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n                )\n                return new Response(null, {\n                    status: 401,\n                    headers,\n                })\n            } else {\n                return new Response(null, { status: 500 })\n            }\n        }\n\n        const headers = new Headers()\n        headers.append('Set-Cookie', `${ACCESS_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`)\n        headers.append('Set-Cookie', `${REFRESH_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`)\n        headers.append('Set-Cookie', `${ACTIVE_ORG_ID_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`)\n        return new Response(null, { status: 401 })\n    }\n\n    async function logoutGetHandler(req: NextRequest) {\n        // Real logout requests will go to the logout POST handler\n        // This endpoint is a landing page for when people logout from the hosted UIs\n        // Instead of doing a logout we'll check the refresh token.\n        // If it's invalid, we'll clear the cookies and redirect using the postLoginRedirectPathFn\n        const path = args?.postLoginRedirectPathFn ? args.postLoginRedirectPathFn(req) : '/'\n        if (!path) {\n            console.error('postLoginPathFn returned undefined')\n            return new Response('Unexpected error', { status: 500 })\n        }\n\n        const refreshToken = req.cookies.get(REFRESH_TOKEN_COOKIE_NAME)?.value\n        if (!refreshToken) {\n            const headers = new Headers()\n            headers.append('Location', path)\n            headers.append(\n                'Set-Cookie',\n                `${ACCESS_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n            )\n            headers.append(\n                'Set-Cookie',\n                `${REFRESH_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n            )\n            headers.append(\n                'Set-Cookie',\n                `${ACTIVE_ORG_ID_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n            )\n            return new Response(null, {\n                status: 302,\n                headers,\n            })\n        }\n\n        const activeOrgId = req.cookies.get(ACTIVE_ORG_ID_COOKIE_NAME)?.value\n        const refreshResponse = await refreshTokenWithAccessAndRefreshToken(refreshToken, activeOrgId)\n        if (refreshResponse.error === 'unexpected') {\n            console.error('Unexpected error while refreshing access token')\n            return new Response('Unexpected error', { status: 500 })\n        } else if (refreshResponse.error === 'unauthorized') {\n            const headers = new Headers()\n            headers.append('Location', path)\n            headers.append(\n                'Set-Cookie',\n                `${ACCESS_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n            )\n            headers.append(\n                'Set-Cookie',\n                `${REFRESH_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n            )\n            headers.append(\n                'Set-Cookie',\n                `${ACTIVE_ORG_ID_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n            )\n            return new Response(null, {\n                status: 302,\n                headers,\n            })\n        } else {\n            const headers = new Headers()\n            headers.append('Location', path)\n            return new Response(null, {\n                status: 302,\n                headers,\n            })\n        }\n    }\n\n    async function logoutPostHandler(req: NextRequest) {\n        const refreshToken = req.cookies.get(REFRESH_TOKEN_COOKIE_NAME)?.value\n        if (!refreshToken) {\n            const headers = new Headers()\n            headers.append(\n                'Set-Cookie',\n                `${ACCESS_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n            )\n            headers.append(\n                'Set-Cookie',\n                `${REFRESH_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n            )\n            headers.append(\n                'Set-Cookie',\n                `${ACTIVE_ORG_ID_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n            )\n            return new Response(null, { status: 200, headers })\n        }\n\n        const authUrlOrigin = getAuthUrlOrigin()\n        const integrationApiKey = getIntegrationApiKey()\n        const logoutBody = { refresh_token: refreshToken }\n        const url = `${authUrlOrigin}/api/backend/v1/logout`\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(logoutBody),\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + integrationApiKey,\n            },\n        })\n\n        if (!response.ok) {\n            console.warn(\n                'Unable to logout, clearing cookies and continuing anyway',\n                response.status,\n                response.statusText\n            )\n        }\n        const headers = new Headers()\n        headers.append('Set-Cookie', `${ACCESS_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`)\n        headers.append('Set-Cookie', `${REFRESH_TOKEN_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`)\n        headers.append('Set-Cookie', `${ACTIVE_ORG_ID_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`)\n        return new Response(null, { status: 200, headers })\n    }\n\n    async function setActiveOrgHandler(req: NextRequest) {\n        const oldRefreshToken = req.cookies.get(REFRESH_TOKEN_COOKIE_NAME)?.value\n        const activeOrgId = req.nextUrl.searchParams.get('active_org_id')\n\n        if (!oldRefreshToken) {\n            const headers = new Headers()\n            headers.append(\n                'Set-Cookie',\n                `${ACTIVE_ORG_ID_COOKIE_NAME}=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0`\n            )\n            return new Response(null, { status: 401, headers })\n        }\n\n        if (!activeOrgId) {\n            return new Response(null, { status: 400 })\n        }\n\n        const refreshResponse = await refreshTokenWithAccessAndRefreshToken(oldRefreshToken, activeOrgId)\n        if (refreshResponse.error === 'unexpected') {\n            throw new Error('Unexpected error while setting active org id')\n        } else if (refreshResponse.error === 'unauthorized') {\n            return new Response('Unauthorized', { status: 401 })\n        }\n\n        const refreshToken = refreshResponse.refreshToken\n        const accessToken = refreshResponse.accessToken\n\n        const authUrlOrigin = getAuthUrlOrigin()\n        const path = `${authUrlOrigin}/propelauth/oauth/userinfo`\n        const response = await fetch(path, {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + accessToken,\n            },\n        })\n\n        if (response.ok) {\n            const userFromToken = await validateAccessToken(accessToken)\n            const data = await response.json()\n            const jsonResponse = {\n                userinfo: data,\n                accessToken,\n                impersonatorUserId: userFromToken.impersonatorUserId,\n                activeOrgId,\n            }\n\n            const headers = new Headers()\n            headers.append(\n                'Set-Cookie',\n                `${ACCESS_TOKEN_COOKIE_NAME}=${accessToken}; Path=/; HttpOnly; Secure; SameSite=Lax`\n            )\n            headers.append(\n                'Set-Cookie',\n                `${REFRESH_TOKEN_COOKIE_NAME}=${refreshToken}; Path=/; HttpOnly; Secure; SameSite=Lax`\n            )\n            headers.append(\n                'Set-Cookie',\n                `${ACTIVE_ORG_ID_COOKIE_NAME}=${activeOrgId}; Path=/; HttpOnly; Secure; SameSite=Lax`\n            )\n            headers.append('Content-Type', 'application/json')\n            return new Response(JSON.stringify(jsonResponse), {\n                status: 200,\n                headers,\n            })\n        } else if (response.status === 401) {\n            return new Response(null, {\n                status: 401,\n            })\n        } else {\n            return new Response(null, { status: 500 })\n        }\n    }\n\n    function getRouteHandler(req: NextRequest, { params }: { params: { slug: string } }) {\n        if (params.slug === 'login') {\n            return loginGetHandler(req)\n        } else if (params.slug === 'signup') {\n            return signupGetHandler(req)\n        } else if (params.slug === 'callback') {\n            return callbackGetHandler(req)\n        } else if (params.slug === 'userinfo') {\n            return userinfoGetHandler(req)\n        } else if (params.slug === 'logout') {\n            return logoutGetHandler(req)\n        } else {\n            return new Response('', { status: 404 })\n        }\n    }\n\n    function postRouteHandler(req: NextRequest, { params }: { params: { slug: string } }) {\n        if (params.slug === 'logout') {\n            return logoutPostHandler(req)\n        } else if (params.slug === 'set-active-org') {\n            return setActiveOrgHandler(req)\n        } else {\n            return new Response('', { status: 404 })\n        }\n    }\n\n    return {\n        getRouteHandler,\n        postRouteHandler,\n    }\n}\n\nfunction randomState(): string {\n    const randomBytes = crypto.getRandomValues(new Uint8Array(32))\n    return Array.from(randomBytes)\n        .map((b) => b.toString(16).padStart(2, '0'))\n        .join('')\n}\n\nfunction redirectToLogin(redirectOptions?: RedirectOptions) {\n    if (!redirectOptions) {\n        redirect(LOGIN_PATH)\n\n    } else if (redirectOptions.returnToPath) {\n        const loginPath = LOGIN_PATH + '?return_to_path=' + encodeURI(redirectOptions.returnToPath)\n        redirect(loginPath)\n\n    } else if (redirectOptions.returnToCurrentPath) {\n        const encodedPath = getUrlEncodedRedirectPathForCurrentUrl()\n        if (encodedPath) {\n            const loginPath = LOGIN_PATH + '?return_to_path=' + encodedPath\n            redirect(loginPath)\n\n        } else {\n            console.warn('Could not get current URL to redirect to')\n            redirect(LOGIN_PATH)\n        }\n    }\n}\n\nexport function getUrlEncodedRedirectPathForCurrentUrl(): string | undefined {\n    const url = getCurrentUrl()\n    if (!url) {\n        return undefined\n    }\n\n    try {\n        const urlObj = new URL(url)\n        return encodeURIComponent(urlObj.pathname + urlObj.search)\n    } catch (e) {\n        console.warn('Current URL is not a valid URL')\n        return undefined\n    }\n}\n\n// It's really common to want to redirect back to the exact location you are on\n// Next.js unfortunately makes this pretty hard, as server components don't have access to the URL\n// The only good way to do this is to set up some middleware and pass the URL down from the middleware\n// Since we have the requirement that people set up middleware with us anyway, it's easy for us to expose\n// this functionality\nexport function getCurrentUrl(): string | undefined {\n    const url = headers().get(CUSTOM_HEADER_FOR_URL)\n    if (!url) {\n        console.warn('Attempting to redirect to the current URL, but we could not find the current URL in the headers. Is the middleware set up?')\n        return undefined\n    } else {\n        return url\n    }\n}\n","export enum SocialLoginProvider {\n    Google = 'Google',\n    GitHub = 'GitHub',\n    Microsoft = 'Microsoft',\n    Slack = 'Slack',\n    LinkedIn = 'LinkedIn',\n    Salesforce = 'Salesforce',\n    Xero = 'Xero',\n    QuickBooksOnline = 'QuickBooks Online',\n}\n\nexport enum SamlLoginProvider {\n    Google = 'Google',\n    Rippling = 'Rippling',\n    OneLogin = 'OneLogin',\n    JumpCloud = 'JumpCloud',\n    Okta = 'Okta',\n    Azure = 'Azure',\n    Duo = 'Duo',\n    Generic = 'Generic',\n}\n\ntype InternalPasswordLoginMethod = {\n    login_method: 'password'\n}\n\ntype InternalMagicLinkLoginMethod = {\n    login_method: 'magic_link'\n}\n\ntype InternalSocialSsoLoginMethod = {\n    login_method: 'social_sso'\n    provider: SocialLoginProvider\n}\n\ntype InternalEmailConfirmationLinkLoginMethod = {\n    login_method: 'email_confirmation_link'\n}\n\ntype InternalSamlSsoLoginMethod = {\n    login_method: 'saml_sso'\n    provider: SamlLoginProvider\n    org_id: string\n}\n\ntype InternalImpersonationLoginMethod = {\n    login_method: 'impersonation'\n}\n\ntype InternalGeneratedFromBackendApiLoginMethod = {\n    login_method: 'generated_from_backend_api'\n}\n\ntype InternalUnknownLoginMethod = {\n    login_method: 'unknown'\n}\n\nexport type InternalLoginMethod =\n    | InternalPasswordLoginMethod\n    | InternalMagicLinkLoginMethod\n    | InternalSocialSsoLoginMethod\n    | InternalEmailConfirmationLinkLoginMethod\n    | InternalSamlSsoLoginMethod\n    | InternalImpersonationLoginMethod\n    | InternalGeneratedFromBackendApiLoginMethod\n    | InternalUnknownLoginMethod\n\ntype PasswordLoginMethod = {\n    loginMethod: 'password'\n}\n\ntype MagicLinkLoginMethod = {\n    loginMethod: 'magic_link'\n}\n\ntype SocialSsoLoginMethod = {\n    loginMethod: 'social_sso'\n    provider: SocialLoginProvider\n}\n\ntype EmailConfirmationLinkLoginMethod = {\n    loginMethod: 'email_confirmation_link'\n}\n\ntype SamlSsoLoginMethod = {\n    loginMethod: 'saml_sso'\n    provider: SamlLoginProvider\n    orgId: string\n}\n\ntype ImpersonationLoginMethod = {\n    loginMethod: 'impersonation'\n}\n\ntype GeneratedFromBackendApiLoginMethod = {\n    loginMethod: 'generated_from_backend_api'\n}\n\ntype UnknownLoginMethod = {\n    loginMethod: 'unknown'\n}\n\nexport type LoginMethod =\n    | PasswordLoginMethod\n    | MagicLinkLoginMethod\n    | SocialSsoLoginMethod\n    | EmailConfirmationLinkLoginMethod\n    | SamlSsoLoginMethod\n    | ImpersonationLoginMethod\n    | GeneratedFromBackendApiLoginMethod\n    | UnknownLoginMethod\n\nexport function toLoginMethod(snake_case?: InternalLoginMethod): LoginMethod {\n    if (!snake_case) {\n        return { loginMethod: 'unknown' }\n    }\n\n    switch (snake_case.login_method) {\n        case 'password':\n            return { loginMethod: 'password' }\n        case 'magic_link':\n            return { loginMethod: 'magic_link' }\n        case 'social_sso':\n            return { loginMethod: 'social_sso', provider: snake_case.provider }\n        case 'email_confirmation_link':\n            return { loginMethod: 'email_confirmation_link' }\n        case 'saml_sso':\n            return { loginMethod: 'saml_sso', provider: snake_case.provider, orgId: snake_case.org_id }\n        case 'impersonation':\n            return { loginMethod: 'impersonation' }\n        case 'generated_from_backend_api':\n            return { loginMethod: 'generated_from_backend_api' }\n        default:\n            return { loginMethod: 'unknown' }\n    }\n}\n","import { InternalLoginMethod, LoginMethod, toLoginMethod } from './loginMethod'\n\nexport class UserFromToken {\n    public userId: string\n\n    public activeOrgId?: string\n    public orgIdToOrgMemberInfo?: OrgIdToOrgMemberInfo\n\n    // Metadata about the user\n    public email: string\n    public firstName?: string\n    public lastName?: string\n    public username?: string\n    public properties?: { [key: string]: unknown }\n    public loginMethod?: LoginMethod\n\n    // If you used our migration APIs to migrate this user from a different system,\n    //   this is their original ID from that system.\n    public legacyUserId?: string\n    public impersonatorUserId?: string\n\n    constructor(\n        userId: string,\n        email: string,\n        orgIdToOrgMemberInfo?: OrgIdToOrgMemberInfo,\n        firstName?: string,\n        lastName?: string,\n        username?: string,\n        legacyUserId?: string,\n        impersonatorUserId?: string,\n        properties?: { [key: string]: unknown },\n        activeOrgId?: string,\n        loginMethod?: LoginMethod\n    ) {\n        this.userId = userId\n\n        this.activeOrgId = activeOrgId\n        this.orgIdToOrgMemberInfo = orgIdToOrgMemberInfo\n\n        this.email = email\n        this.firstName = firstName\n        this.lastName = lastName\n        this.username = username\n\n        this.legacyUserId = legacyUserId\n        this.impersonatorUserId = impersonatorUserId\n\n        this.properties = properties\n        this.loginMethod = loginMethod\n    }\n\n    public getActiveOrg(): OrgMemberInfo | undefined {\n        if (!this.activeOrgId || !this.orgIdToOrgMemberInfo) {\n            return undefined\n        }\n\n        return this.orgIdToOrgMemberInfo[this.activeOrgId]\n    }\n\n    public getActiveOrgId(): string | undefined {\n        return this.activeOrgId\n    }\n\n    public getOrg(orgId: string): OrgMemberInfo | undefined {\n        if (!this.orgIdToOrgMemberInfo) {\n            return undefined\n        }\n\n        return this.orgIdToOrgMemberInfo[orgId]\n    }\n\n    public getOrgByName(orgName: string): OrgMemberInfo | undefined {\n        if (!this.orgIdToOrgMemberInfo) {\n            return undefined\n        }\n\n        const urlSafeOrgName = orgName.toLowerCase().replace(/ /g, '-')\n        for (const orgId in this.orgIdToOrgMemberInfo) {\n            const orgMemberInfo = this.orgIdToOrgMemberInfo[orgId]\n            if (orgMemberInfo.urlSafeOrgName === urlSafeOrgName) {\n                return orgMemberInfo\n            }\n        }\n\n        return undefined\n    }\n\n    public getOrgs(): OrgMemberInfo[] {\n        if (!this.orgIdToOrgMemberInfo) {\n            return []\n        }\n\n        return Object.values(this.orgIdToOrgMemberInfo)\n    }\n\n    public isImpersonating(): boolean {\n        return !!this.impersonatorUserId\n    }\n\n    public static fromJSON(json: string): UserFromToken {\n        const obj = JSON.parse(json)\n        const orgIdToOrgMemberInfo: OrgIdToOrgMemberInfo = {}\n        for (const orgId in obj.orgIdToOrgMemberInfo) {\n            orgIdToOrgMemberInfo[orgId] = OrgMemberInfo.fromJSON(JSON.stringify(obj.orgIdToOrgMemberInfo[orgId]))\n        }\n        return new UserFromToken(\n            obj.userId,\n            obj.email,\n            orgIdToOrgMemberInfo,\n            obj.firstName,\n            obj.lastName,\n            obj.username,\n            obj.legacyUserId,\n            obj.impersonatorUserId,\n            obj.properties,\n            obj.activeOrgId,\n            obj.loginMethod\n        )\n    }\n\n    public static fromJwtPayload(payload: InternalUser): UserFromToken {\n        let activeOrgId: string | undefined\n        let orgIdToOrgMemberInfo: OrgIdToOrgMemberInfo | undefined\n\n        if (payload.org_member_info) {\n            activeOrgId = payload.org_member_info.org_id\n            orgIdToOrgMemberInfo = toOrgIdToOrgMemberInfo({ [activeOrgId]: payload.org_member_info })\n        } else {\n            activeOrgId = undefined\n            orgIdToOrgMemberInfo = toOrgIdToOrgMemberInfo(payload.org_id_to_org_member_info)\n        }\n\n        const loginMethod = toLoginMethod(payload.login_method)\n\n        return new UserFromToken(\n            payload.user_id,\n            payload.email,\n            orgIdToOrgMemberInfo,\n            payload.first_name,\n            payload.last_name,\n            payload.username,\n            payload.legacy_user_id,\n            payload.impersonatorUserId,\n            payload.properties,\n            activeOrgId,\n            loginMethod\n        )\n    }\n}\n\nexport type OrgIdToOrgMemberInfo = {\n    [orgId: string]: OrgMemberInfo\n}\n\nexport class OrgMemberInfo {\n    public orgId: string\n    public orgName: string\n    public orgMetadata: { [key: string]: any }\n    public urlSafeOrgName: string\n\n    public userAssignedRole: string\n    public userInheritedRolesPlusCurrentRole: string[]\n    public userPermissions: string[]\n\n    constructor(\n        orgId: string,\n        orgName: string,\n        orgMetadata: { [key: string]: any },\n        urlSafeOrgName: string,\n        userAssignedRole: string,\n        userInheritedRolesPlusCurrentRole: string[],\n        userPermissions: string[]\n    ) {\n        this.orgId = orgId\n        this.orgName = orgName\n        this.orgMetadata = orgMetadata\n        this.urlSafeOrgName = urlSafeOrgName\n\n        this.userAssignedRole = userAssignedRole\n        this.userInheritedRolesPlusCurrentRole = userInheritedRolesPlusCurrentRole\n        this.userPermissions = userPermissions\n    }\n\n    // validation methods\n\n    public isRole(role: string): boolean {\n        return this.userAssignedRole === role\n    }\n\n    public isAtLeastRole(role: string): boolean {\n        return this.userInheritedRolesPlusCurrentRole.includes(role)\n    }\n\n    public hasPermission(permission: string): boolean {\n        return this.userPermissions.includes(permission)\n    }\n\n    public hasAllPermissions(permissions: string[]): boolean {\n        return permissions.every((permission) => this.hasPermission(permission))\n    }\n\n    public static fromJSON(json: string): OrgMemberInfo {\n        const obj = JSON.parse(json)\n        return new OrgMemberInfo(\n            obj.orgId,\n            obj.orgName,\n            obj.orgMetadata,\n            obj.urlSafeOrgName,\n            obj.userAssignedRole,\n            obj.userInheritedRolesPlusCurrentRole,\n            obj.userPermissions\n        )\n    }\n\n    // getters for the private fields\n\n    get assignedRole(): string {\n        return this.userAssignedRole\n    }\n\n    get inheritedRolesPlusCurrentRole(): string[] {\n        return this.userInheritedRolesPlusCurrentRole\n    }\n\n    get permissions(): string[] {\n        return this.userPermissions\n    }\n}\n\n// These Internal types exist since the server returns snake case, but typescript/javascript\n// convention is camelCase.\nexport type InternalOrgMemberInfo = {\n    org_id: string\n    org_name: string\n    org_metadata: { [key: string]: any }\n    url_safe_org_name: string\n    user_role: string\n    inherited_user_roles_plus_current_role: string[]\n    user_permissions: string[]\n}\n\nexport type InternalUser = {\n    user_id: string\n\n    org_member_info?: InternalOrgMemberInfo\n    org_id_to_org_member_info?: { [org_id: string]: InternalOrgMemberInfo }\n\n    email: string\n    first_name?: string\n    last_name?: string\n    username?: string\n    properties?: { [key: string]: unknown }\n    login_method?: InternalLoginMethod\n\n    // If you used our migration APIs to migrate this user from a different system, this is their original ID from that system.\n    legacy_user_id?: string\n    impersonatorUserId?: string\n}\n\nexport function toUser(snake_case: InternalUser): UserFromToken {\n    return UserFromToken.fromJwtPayload(snake_case)\n}\n\nexport function toOrgIdToOrgMemberInfo(snake_case?: {\n    [org_id: string]: InternalOrgMemberInfo\n}): OrgIdToOrgMemberInfo | undefined {\n    if (snake_case === undefined) {\n        return undefined\n    }\n    const camelCase: OrgIdToOrgMemberInfo = {}\n\n    for (const key of Object.keys(snake_case)) {\n        const snakeCaseValue = snake_case[key]\n        if (snakeCaseValue) {\n            camelCase[key] = new OrgMemberInfo(\n                snakeCaseValue.org_id,\n                snakeCaseValue.org_name,\n                snakeCaseValue.org_metadata,\n                snakeCaseValue.url_safe_org_name,\n                snakeCaseValue.user_role,\n                snakeCaseValue.inherited_user_roles_plus_current_role,\n                snakeCaseValue.user_permissions\n            )\n        }\n    }\n\n    return camelCase\n}\n","import { ResponseCookie } from 'next/dist/compiled/@edge-runtime/cookies'\nimport { InternalUser, toUser, UserFromToken } from '../user'\nimport { ConfigurationException, UnauthorizedException } from './exceptions'\nimport * as jose from 'jose'\n\ntype RefreshAndAccessTokens = {\n    refreshToken: string\n    accessToken: string\n    error: 'none'\n}\n\ntype RefreshAndAccessTokensUnauthorizedError = {\n    error: 'unauthorized'\n}\n\ntype RefreshAndAccessTokensUnexpectedError = {\n    error: 'unexpected'\n}\n\nexport type RefreshTokenResponse =\n    | RefreshAndAccessTokens\n    | RefreshAndAccessTokensUnauthorizedError\n    | RefreshAndAccessTokensUnexpectedError\n\nexport const LOGIN_PATH = '/api/auth/login'\nexport const CALLBACK_PATH = '/api/auth/callback'\nexport const USERINFO_PATH = '/api/auth/userinfo'\nexport const LOGOUT_PATH = '/api/auth/logout'\nexport const ACCESS_TOKEN_COOKIE_NAME = '__pa_at'\nexport const REFRESH_TOKEN_COOKIE_NAME = '__pa_rt'\nexport const STATE_COOKIE_NAME = '__pa_state'\nexport const CUSTOM_HEADER_FOR_ACCESS_TOKEN = 'x-propelauth-access-token'\nexport const CUSTOM_HEADER_FOR_URL = 'x-propelauth-current-url'\nexport const RETURN_TO_PATH_COOKIE_NAME = '__pa_return_to_path'\n\nexport const COOKIE_OPTIONS: Partial<ResponseCookie> = {\n    httpOnly: true,\n    sameSite: 'lax',\n    secure: true,\n    path: '/',\n}\n\nexport function getAuthUrlOrigin() {\n    return getAuthUrl().origin\n}\n\nexport function getAuthUrl() {\n    const authUrl = process.env.NEXT_PUBLIC_AUTH_URL\n    if (!authUrl) {\n        throw new Error('NEXT_PUBLIC_AUTH_URL is not set')\n    }\n    return new URL(authUrl)\n}\n\nexport function getRedirectUri() {\n    const redirectUri = process.env.PROPELAUTH_REDIRECT_URI\n    if (!redirectUri) {\n        throw new Error('PROPELAUTH_REDIRECT_URI is not set')\n    }\n    return redirectUri\n}\n\nexport function getIntegrationApiKey() {\n    const integrationApiKey = process.env.PROPELAUTH_API_KEY\n    if (!integrationApiKey) {\n        throw new Error('PROPELAUTH_API_KEY is not set')\n    }\n    return integrationApiKey\n}\n\nexport function getVerifierKey() {\n    const verifierKey = process.env.PROPELAUTH_VERIFIER_KEY\n    if (!verifierKey) {\n        throw new Error('PROPELAUTH_VERIFIER_KEY is not set')\n    }\n    return verifierKey.replace(/\\\\n/g, '\\n')\n}\n\nexport async function refreshTokenWithAccessAndRefreshToken(\n    refreshToken: string,\n    activeOrgId?: string\n): Promise<RefreshTokenResponse> {\n    const body = {\n        refresh_token: refreshToken,\n    }\n\n    const queryParams = new URLSearchParams()\n    if (activeOrgId) {\n        queryParams.set('with_active_org_support', 'true')\n        queryParams.set('active_org_id', activeOrgId)\n    }\n\n    const url = `${getAuthUrlOrigin()}/api/backend/v1/refresh_token?${queryParams.toString()}`\n    const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + getIntegrationApiKey(),\n        },\n    })\n\n    if (response.ok) {\n        const data = await response.json()\n        const newRefreshToken = data.refresh_token\n        const { access_token: accessToken, expires_at_seconds: expiresAtSeconds } = data.access_token\n\n        return {\n            refreshToken: newRefreshToken,\n            accessToken,\n            error: 'none',\n        }\n    } else if (response.status === 400 || response.status === 401) {\n        return { error: 'unauthorized' }\n    } else {\n        return { error: 'unexpected' }\n    }\n}\n\nexport async function validateAccessTokenOrUndefined(\n    accessToken: string | undefined\n): Promise<UserFromToken | undefined> {\n    try {\n        return await validateAccessToken(accessToken)\n    } catch (err) {\n        if (err instanceof ConfigurationException) {\n            throw err\n        } else if (err instanceof UnauthorizedException) {\n            return undefined\n        } else {\n            console.info('Error validating access token', err)\n            return undefined\n        }\n    }\n}\n\nexport async function validateAccessToken(accessToken: string | undefined): Promise<UserFromToken> {\n    let publicKey\n    try {\n        publicKey = await jose.importSPKI(getVerifierKey(), 'RS256')\n    } catch (err) {\n        console.error(\"Verifier key is invalid. Make sure it's specified correctly, including the newlines.\", err)\n        throw new ConfigurationException('Invalid verifier key')\n    }\n\n    if (!accessToken) {\n        throw new UnauthorizedException('No access token provided')\n    }\n\n    let accessTokenWithoutBearer = accessToken\n    if (accessToken.toLowerCase().startsWith('bearer ')) {\n        accessTokenWithoutBearer = accessToken.substring('bearer '.length)\n    }\n\n    try {\n        const { payload } = await jose.jwtVerify(accessTokenWithoutBearer, publicKey, {\n            issuer: getAuthUrlOrigin(),\n            algorithms: ['RS256'],\n        })\n\n        return toUser(<InternalUser>payload)\n    } catch (e) {\n        if (e instanceof Error) {\n            throw new UnauthorizedException(e.message)\n        } else {\n            throw new UnauthorizedException('Unable to decode jwt')\n        }\n    }\n}\n","export const ACTIVE_ORG_ID_COOKIE_NAME = '__pa_org_id'\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,IAAM,wBAAN,cAAoC,MAAM;AAAA,EAI7C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,UAAU;AACf,SAAK,SAAS;AAAA,EAClB;AACJ;AAEO,IAAM,yBAAN,cAAqC,MAAM;AAAA,EAI9C,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,UAAU;AACf,SAAK,SAAS;AAAA,EAClB;AACJ;;;ACpBA,wBAAyB;AACzB,qBAAiC;AACjC,oBAA0C;;;AC8GnC,SAAS,cAAc,YAA+C;AACzE,MAAI,CAAC,YAAY;AACb,WAAO,EAAE,aAAa,UAAU;AAAA,EACpC;AAEA,UAAQ,WAAW,cAAc;AAAA,IAC7B,KAAK;AACD,aAAO,EAAE,aAAa,WAAW;AAAA,IACrC,KAAK;AACD,aAAO,EAAE,aAAa,aAAa;AAAA,IACvC,KAAK;AACD,aAAO,EAAE,aAAa,cAAc,UAAU,WAAW,SAAS;AAAA,IACtE,KAAK;AACD,aAAO,EAAE,aAAa,0BAA0B;AAAA,IACpD,KAAK;AACD,aAAO,EAAE,aAAa,YAAY,UAAU,WAAW,UAAU,OAAO,WAAW,OAAO;AAAA,IAC9F,KAAK;AACD,aAAO,EAAE,aAAa,gBAAgB;AAAA,IAC1C,KAAK;AACD,aAAO,EAAE,aAAa,6BAA6B;AAAA,IACvD;AACI,aAAO,EAAE,aAAa,UAAU;AAAA,EACxC;AACJ;;;ACrIO,IAAM,gBAAN,MAAoB;AAAA,EAmBvB,YACI,QACA,OACA,sBACA,WACA,UACA,UACA,cACA,oBACA,YACA,aACA,aACF;AACE,SAAK,SAAS;AAEd,SAAK,cAAc;AACnB,SAAK,uBAAuB;AAE5B,SAAK,QAAQ;AACb,SAAK,YAAY;AACjB,SAAK,WAAW;AAChB,SAAK,WAAW;AAEhB,SAAK,eAAe;AACpB,SAAK,qBAAqB;AAE1B,SAAK,aAAa;AAClB,SAAK,cAAc;AAAA,EACvB;AAAA,EAEO,eAA0C;AAC7C,QAAI,CAAC,KAAK,eAAe,CAAC,KAAK,sBAAsB;AACjD,aAAO;AAAA,IACX;AAEA,WAAO,KAAK,qBAAqB,KAAK,WAAW;AAAA,EACrD;AAAA,EAEO,iBAAqC;AACxC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,OAAO,OAA0C;AACpD,QAAI,CAAC,KAAK,sBAAsB;AAC5B,aAAO;AAAA,IACX;AAEA,WAAO,KAAK,qBAAqB,KAAK;AAAA,EAC1C;AAAA,EAEO,aAAa,SAA4C;AAC5D,QAAI,CAAC,KAAK,sBAAsB;AAC5B,aAAO;AAAA,IACX;AAEA,UAAM,iBAAiB,QAAQ,YAAY,EAAE,QAAQ,MAAM,GAAG;AAC9D,eAAW,SAAS,KAAK,sBAAsB;AAC3C,YAAM,gBAAgB,KAAK,qBAAqB,KAAK;AACrD,UAAI,cAAc,mBAAmB,gBAAgB;AACjD,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEO,UAA2B;AAC9B,QAAI,CAAC,KAAK,sBAAsB;AAC5B,aAAO,CAAC;AAAA,IACZ;AAEA,WAAO,OAAO,OAAO,KAAK,oBAAoB;AAAA,EAClD;AAAA,EAEO,kBAA2B;AAC9B,WAAO,CAAC,CAAC,KAAK;AAAA,EAClB;AAAA,EAEA,OAAc,SAAS,MAA6B;AAChD,UAAM,MAAM,KAAK,MAAM,IAAI;AAC3B,UAAM,uBAA6C,CAAC;AACpD,eAAW,SAAS,IAAI,sBAAsB;AAC1C,2BAAqB,KAAK,IAAI,cAAc,SAAS,KAAK,UAAU,IAAI,qBAAqB,KAAK,CAAC,CAAC;AAAA,IACxG;AACA,WAAO,IAAI;AAAA,MACP,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ;AAAA,MACA,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,IACR;AAAA,EACJ;AAAA,EAEA,OAAc,eAAe,SAAsC;AAC/D,QAAI;AACJ,QAAI;AAEJ,QAAI,QAAQ,iBAAiB;AACzB,oBAAc,QAAQ,gBAAgB;AACtC,6BAAuB,uBAAuB,EAAE,CAAC,WAAW,GAAG,QAAQ,gBAAgB,CAAC;AAAA,IAC5F,OAAO;AACH,oBAAc;AACd,6BAAuB,uBAAuB,QAAQ,yBAAyB;AAAA,IACnF;AAEA,UAAM,cAAc,cAAc,QAAQ,YAAY;AAEtD,WAAO,IAAI;AAAA,MACP,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR;AAAA,MACA,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AACJ;AAMO,IAAM,gBAAN,MAAoB;AAAA,EAUvB,YACI,OACA,SACA,aACA,gBACA,kBACA,mCACA,iBACF;AACE,SAAK,QAAQ;AACb,SAAK,UAAU;AACf,SAAK,cAAc;AACnB,SAAK,iBAAiB;AAEtB,SAAK,mBAAmB;AACxB,SAAK,oCAAoC;AACzC,SAAK,kBAAkB;AAAA,EAC3B;AAAA;AAAA,EAIO,OAAO,MAAuB;AACjC,WAAO,KAAK,qBAAqB;AAAA,EACrC;AAAA,EAEO,cAAc,MAAuB;AACxC,WAAO,KAAK,kCAAkC,SAAS,IAAI;AAAA,EAC/D;AAAA,EAEO,cAAc,YAA6B;AAC9C,WAAO,KAAK,gBAAgB,SAAS,UAAU;AAAA,EACnD;AAAA,EAEO,kBAAkB,aAAgC;AACrD,WAAO,YAAY,MAAM,CAAC,eAAe,KAAK,cAAc,UAAU,CAAC;AAAA,EAC3E;AAAA,EAEA,OAAc,SAAS,MAA6B;AAChD,UAAM,MAAM,KAAK,MAAM,IAAI;AAC3B,WAAO,IAAI;AAAA,MACP,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,IACR;AAAA,EACJ;AAAA;AAAA,EAIA,IAAI,eAAuB;AACvB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,gCAA0C;AAC1C,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,cAAwB;AACxB,WAAO,KAAK;AAAA,EAChB;AACJ;AAgCO,SAAS,OAAO,YAAyC;AAC5D,SAAO,cAAc,eAAe,UAAU;AAClD;AAEO,SAAS,uBAAuB,YAEF;AACjC,MAAI,eAAe,QAAW;AAC1B,WAAO;AAAA,EACX;AACA,QAAM,YAAkC,CAAC;AAEzC,aAAW,OAAO,OAAO,KAAK,UAAU,GAAG;AACvC,UAAM,iBAAiB,WAAW,GAAG;AACrC,QAAI,gBAAgB;AAChB,gBAAU,GAAG,IAAI,IAAI;AAAA,QACjB,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,QACf,eAAe;AAAA,MACnB;AAAA,IACJ;AAAA,EACJ;AAEA,SAAO;AACX;;;AC5RA,WAAsB;AAqBf,IAAM,aAAa;AACnB,IAAM,gBAAgB;AACtB,IAAM,gBAAgB;AACtB,IAAM,cAAc;AACpB,IAAM,2BAA2B;AACjC,IAAM,4BAA4B;AAClC,IAAM,oBAAoB;AAC1B,IAAM,iCAAiC;AACvC,IAAM,wBAAwB;AAC9B,IAAM,6BAA6B;AAEnC,IAAM,iBAA0C;AAAA,EACnD,UAAU;AAAA,EACV,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,MAAM;AACV;AAEO,SAAS,mBAAmB;AAC/B,SAAO,WAAW,EAAE;AACxB;AAEO,SAAS,aAAa;AACzB,QAAM,UAAU,QAAQ,IAAI;AAC5B,MAAI,CAAC,SAAS;AACV,UAAM,IAAI,MAAM,iCAAiC;AAAA,EACrD;AACA,SAAO,IAAI,IAAI,OAAO;AAC1B;AAEO,SAAS,iBAAiB;AAC7B,QAAM,cAAc,QAAQ,IAAI;AAChC,MAAI,CAAC,aAAa;AACd,UAAM,IAAI,MAAM,oCAAoC;AAAA,EACxD;AACA,SAAO;AACX;AAEO,SAAS,uBAAuB;AACnC,QAAM,oBAAoB,QAAQ,IAAI;AACtC,MAAI,CAAC,mBAAmB;AACpB,UAAM,IAAI,MAAM,+BAA+B;AAAA,EACnD;AACA,SAAO;AACX;AAEO,SAAS,iBAAiB;AAC7B,QAAM,cAAc,QAAQ,IAAI;AAChC,MAAI,CAAC,aAAa;AACd,UAAM,IAAI,MAAM,oCAAoC;AAAA,EACxD;AACA,SAAO,YAAY,QAAQ,QAAQ,IAAI;AAC3C;AAEA,SAAsB,sCAClB,cACA,aAC6B;AAAA;AAC7B,UAAM,OAAO;AAAA,MACT,eAAe;AAAA,IACnB;AAEA,UAAM,cAAc,IAAI,gBAAgB;AACxC,QAAI,aAAa;AACb,kBAAY,IAAI,2BAA2B,MAAM;AACjD,kBAAY,IAAI,iBAAiB,WAAW;AAAA,IAChD;AAEA,UAAM,MAAM,GAAG,iBAAiB,kCAAkC,YAAY,SAAS;AACvF,UAAM,WAAW,MAAM,MAAM,KAAK;AAAA,MAC9B,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU,IAAI;AAAA,MACzB,SAAS;AAAA,QACL,gBAAgB;AAAA,QAChB,eAAe,YAAY,qBAAqB;AAAA,MACpD;AAAA,IACJ,CAAC;AAED,QAAI,SAAS,IAAI;AACb,YAAM,OAAO,MAAM,SAAS,KAAK;AACjC,YAAM,kBAAkB,KAAK;AAC7B,YAAM,EAAE,cAAc,aAAa,oBAAoB,iBAAiB,IAAI,KAAK;AAEjF,aAAO;AAAA,QACH,cAAc;AAAA,QACd;AAAA,QACA,OAAO;AAAA,MACX;AAAA,IACJ,WAAW,SAAS,WAAW,OAAO,SAAS,WAAW,KAAK;AAC3D,aAAO,EAAE,OAAO,eAAe;AAAA,IACnC,OAAO;AACH,aAAO,EAAE,OAAO,aAAa;AAAA,IACjC;AAAA,EACJ;AAAA;AAEA,SAAsB,+BAClB,aACkC;AAAA;AAClC,QAAI;AACA,aAAO,MAAM,oBAAoB,WAAW;AAAA,IAChD,SAAS,KAAP;AACE,UAAI,eAAe,wBAAwB;AACvC,cAAM;AAAA,MACV,WAAW,eAAe,uBAAuB;AAC7C,eAAO;AAAA,MACX,OAAO;AACH,gBAAQ,KAAK,iCAAiC,GAAG;AACjD,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA;AAEA,SAAsB,oBAAoB,aAAyD;AAAA;AAC/F,QAAI;AACJ,QAAI;AACA,kBAAY,MAAW,gBAAW,eAAe,GAAG,OAAO;AAAA,IAC/D,SAAS,KAAP;AACE,cAAQ,MAAM,wFAAwF,GAAG;AACzG,YAAM,IAAI,uBAAuB,sBAAsB;AAAA,IAC3D;AAEA,QAAI,CAAC,aAAa;AACd,YAAM,IAAI,sBAAsB,0BAA0B;AAAA,IAC9D;AAEA,QAAI,2BAA2B;AAC/B,QAAI,YAAY,YAAY,EAAE,WAAW,SAAS,GAAG;AACjD,iCAA2B,YAAY,UAAU,UAAU,MAAM;AAAA,IACrE;AAEA,QAAI;AACA,YAAM,EAAE,QAAQ,IAAI,MAAW,eAAU,0BAA0B,WAAW;AAAA,QAC1E,QAAQ,iBAAiB;AAAA,QACzB,YAAY,CAAC,OAAO;AAAA,MACxB,CAAC;AAED,aAAO,OAAqB,OAAO;AAAA,IACvC,SAAS,GAAP;AACE,UAAI,aAAa,OAAO;AACpB,cAAM,IAAI,sBAAsB,EAAE,OAAO;AAAA,MAC7C,OAAO;AACH,cAAM,IAAI,sBAAsB,sBAAsB;AAAA,MAC1D;AAAA,IACJ;AAAA,EACJ;AAAA;;;ACxKO,IAAM,4BAA4B;;;AJiCzC,SAAsB,kBAAkB,iBAA2D;AAAA;AAC/F,UAAM,OAAO,MAAM,QAAQ;AAC3B,QAAI,MAAM;AACN,aAAO;AAAA,IACX,OAAO;AACH,sBAAgB,eAAe;AAC/B,YAAM,IAAI,MAAM,sBAAsB;AAAA,IAC1C;AAAA,EACJ;AAAA;AAEA,SAAsB,UAA8C;AAAA;AAChE,UAAM,cAAc,eAAe;AACnC,QAAI,aAAa;AACb,YAAM,OAAO,MAAM,+BAA+B,WAAW;AAC7D,UAAI,MAAM;AACN,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAEO,SAAS,iBAAqC;AAtDrD;AAuDI,aAAO,wBAAQ,EAAE,IAAI,8BAA8B,OAAK,iCAAQ,EAAE,IAAI,wBAAwB,MAAtC,mBAAyC;AACrG;AASA,SAAsB,eAAe,KAAqC;AAAA;AAjE1E;AAkEI,QAAI,IAAI,QAAQ,IAAI,8BAA8B,GAAG;AACjD,YAAM,IAAI,MAAM,GAAG,sEAAsE;AAAA,IAC7F,WAAW,IAAI,QAAQ,IAAI,qBAAqB,GAAG;AAC/C,YAAM,IAAI,MAAM,GAAG,6DAA6D;AAAA,IACpF,WACI,IAAI,QAAQ,aAAa,iBACzB,IAAI,QAAQ,aAAa,eACzB,IAAI,QAAQ,aAAa,eAC3B;AAEE,aAAO,gBAAgB,GAAG;AAAA,IAC9B;AAEA,UAAM,eAAc,SAAI,QAAQ,IAAI,wBAAwB,MAAxC,mBAA2C;AAC/D,UAAM,gBAAe,SAAI,QAAQ,IAAI,yBAAyB,MAAzC,mBAA4C;AACjE,UAAM,eAAc,SAAI,QAAQ,IAAI,yBAAyB,MAAzC,mBAA4C;AAGhE,QAAI,aAAa;AACb,YAAM,OAAO,MAAM,+BAA+B,WAAW;AAC7D,UAAI,MAAM;AACN,eAAO,gBAAgB,GAAG;AAAA,MAC9B;AAAA,IACJ;AAGA,QAAI,cAAc;AACd,YAAM,WAAW,MAAM,sCAAsC,cAAc,WAAW;AACtF,UAAI,SAAS,UAAU,cAAc;AACjC,cAAM,IAAI,MAAM,gDAAgD;AAAA,MACpE,WAAW,SAAS,UAAU,gBAAgB;AAC1C,cAAMA,YAAW,gBAAgB,GAAG;AACpC,QAAAA,UAAS,QAAQ,OAAO,wBAAwB;AAChD,QAAAA,UAAS,QAAQ,OAAO,yBAAyB;AACjD,eAAOA;AAAA,MACX,OAAO;AACH,cAAM,eAAe,gBAAgB,KAAK,SAAS,WAAW;AAC9D,qBAAa,QAAQ,IAAI,0BAA0B,SAAS,aAAa,cAAc;AACvF,qBAAa,QAAQ,IAAI,2BAA2B,SAAS,cAAc,cAAc;AACzF,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO,gBAAgB,GAAG;AAAA,EAC9B;AAAA;AAEA,SAAS,gBAAgB,SAAsB,gBAAyB;AACpE,QAAMC,WAAU,IAAI,QAAQ,QAAQ,OAAO;AAC3C,EAAAA,SAAQ,IAAI,uBAAuB,QAAQ,QAAQ,SAAS,CAAC;AAC7D,MAAI,gBAAgB;AAChB,IAAAA,SAAQ,IAAI,gCAAgC,cAAc;AAAA,EAC9D;AACA,SAAO,2BAAa,KAAK;AAAA,IACrB,SAAS;AAAA,MACL,SAAAA;AAAA,IACJ;AAAA,EACJ,CAAC;AACL;AAOO,SAAS,iBAAiB,MAAyB;AACtD,WAAS,gBAAgB,KAAkB;AACvC,WAAO,qBAAqB,KAAK,KAAK;AAAA,EAC1C;AAEA,WAAS,iBAAiB,KAAkB;AACxC,WAAO,qBAAqB,KAAK,IAAI;AAAA,EACzC;AAEA,WAAS,qBAAqB,KAAkB,UAAmB;AAC/D,UAAM,eAAe,IAAI,QAAQ,aAAa,IAAI,gBAAgB;AAClE,UAAM,QAAQ,YAAY;AAC1B,UAAM,cAAc,eAAe;AAEnC,UAAM,2BAA2B,IAAI,gBAAgB;AAAA,MACjD,cAAc;AAAA,MACd;AAAA,MACA,QAAQ,WAAW,SAAS;AAAA,IAChC,CAAC;AACD,UAAM,gBAAgB,iBAAiB,IAAI,+BAA+B,yBAAyB,SAAS;AAE5G,UAAMA,WAAU,IAAI,QAAQ;AAC5B,IAAAA,SAAQ,OAAO,YAAY,aAAa;AACxC,IAAAA,SAAQ,OAAO,cAAc,GAAG,qBAAqB,+CAA+C;AACpG,QAAI,cAAc;AACd,UAAI,aAAa,WAAW,GAAG,GAAG;AAC9B,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG,8BAA8B;AAAA,QACrC;AAAA,MACJ,OAAO;AACH,gBAAQ,KAAK,kCAAkC;AAAA,MACnD;AAAA,IACJ;AAEA,WAAO,IAAI,SAAS,MAAM;AAAA,MACtB,QAAQ;AAAA,MACR,SAAAA;AAAA,IACJ,CAAC;AAAA,EACL;AAEA,WAAe,mBAAmB,KAAkB;AAAA;AA3KxD;AA4KQ,YAAM,cAAa,SAAI,QAAQ,IAAI,iBAAiB,MAAjC,mBAAoC;AACvD,UAAI,CAAC,cAAc,WAAW,WAAW,IAAI;AACzC,eAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,KAAK,SAAS,EAAE,UAAU,WAAW,EAAE,CAAC;AAAA,MAChF;AAEA,YAAM,cAAc,IAAI,QAAQ;AAChC,YAAM,QAAQ,YAAY,IAAI,OAAO;AACrC,YAAM,OAAO,YAAY,IAAI,MAAM;AACnC,UAAI,UAAU,YAAY;AACtB,eAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,KAAK,SAAS,EAAE,UAAU,WAAW,EAAE,CAAC;AAAA,MAChF;AAEA,YAAM,gBAAgB,iBAAiB;AACvC,YAAM,cAAc,eAAe;AACnC,YAAM,oBAAoB,qBAAqB;AAC/C,YAAM,mBAAmB;AAAA,QACrB,cAAc;AAAA,QACd;AAAA,MACJ;AACA,YAAM,MAAM,GAAG;AACf,YAAM,WAAW,MAAM,MAAM,KAAK;AAAA,QAC9B,QAAQ;AAAA,QACR,MAAM,KAAK,UAAU,gBAAgB;AAAA,QACrC,SAAS;AAAA,UACL,gBAAgB;AAAA,UAChB,eAAe,YAAY;AAAA,QAC/B;AAAA,MACJ,CAAC;AAED,UAAI,SAAS,IAAI;AACb,cAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,cAAM,cAAc,KAAK;AAIzB,cAAM,0BAAyB,SAAI,QAAQ,IAAI,0BAA0B,MAA1C,mBAA6C;AAC5E,cAAM,eACF,2DAA2B,6BAAM,2BAA0B,KAAK,wBAAwB,GAAG,IAAI;AACnG,YAAI,CAAC,cAAc;AACf,kBAAQ,MAAM,4CAA4C;AAC1D,iBAAO,IAAI,SAAS,oBAAoB,EAAE,QAAQ,IAAI,CAAC;AAAA,QAC3D;AAMA,cAAM,sBAAqB,SAAI,QAAQ,IAAI,yBAAyB,MAAzC,mBAA4C;AAEvE,cAAM,OAAO,MAAM,oBAAoB,WAAW;AAClD,cAAM,2BAA2B,CAAC,CAAC,sBAAsB,CAAC,CAAC,KAAK,OAAO,kBAAkB;AAEzF,YAAI,cAAc;AAClB,YAAI,0BAA0B;AAC1B,wBAAc;AAAA,QAClB,WAAW,6BAAM,uBAAuB;AACpC,wBAAc,KAAK,sBAAsB,KAAK,IAAI;AAAA,QACtD;AAGA,YAAI,aAAa;AACb,gBAAMD,YAAW,MAAM,sCAAsC,KAAK,eAAe,WAAW;AAC5F,cAAIA,UAAS,UAAU,cAAc;AACjC,kBAAM,IAAI,MAAM,2CAA2C;AAAA,UAC/D,WAAWA,UAAS,UAAU,gBAAgB;AAC1C,oBAAQ;AAAA,cACJ;AAAA,YACJ;AACA,mBAAO,IAAI,SAAS,gBAAgB,EAAE,QAAQ,IAAI,CAAC;AAAA,UACvD,OAAO;AACH,kBAAMC,WAAU,IAAI,QAAQ;AAC5B,YAAAA,SAAQ,OAAO,YAAY,YAAY;AACvC,YAAAA,SAAQ;AAAA,cACJ;AAAA,cACA,GAAG,4BAA4BD,UAAS;AAAA,YAC5C;AACA,YAAAC,SAAQ;AAAA,cACJ;AAAA,cACA,GAAG,6BAA6BD,UAAS;AAAA,YAC7C;AACA,YAAAC,SAAQ;AAAA,cACJ;AAAA,cACA,GAAG,6BAA6B;AAAA,YACpC;AACA,YAAAA,SAAQ;AAAA,cACJ;AAAA,cACA,GAAG;AAAA,YACP;AACA,mBAAO,IAAI,SAAS,MAAM;AAAA,cACtB,QAAQ;AAAA,cACR,SAAAA;AAAA,YACJ,CAAC;AAAA,UACL;AAAA,QACJ;AAEA,cAAMA,WAAU,IAAI,QAAQ;AAC5B,QAAAA,SAAQ,OAAO,YAAY,YAAY;AACvC,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG,4BAA4B;AAAA,QACnC;AACA,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG,6BAA6B,KAAK;AAAA,QACzC;AACA,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG;AAAA,QACP;AACA,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG;AAAA,QACP;AACA,eAAO,IAAI,SAAS,MAAM;AAAA,UACtB,QAAQ;AAAA,UACR,SAAAA;AAAA,QACJ,CAAC;AAAA,MACL,WAAW,SAAS,WAAW,KAAK;AAChC,gBAAQ;AAAA,UACJ;AAAA,QACJ;AACA,eAAO,IAAI,SAAS,oBAAoB,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC3D,OAAO;AACH,eAAO,IAAI,SAAS,oBAAoB,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC3D;AAAA,IACJ;AAAA;AAEA,WAAe,mBAAmB,KAAkB;AAAA;AA5SxD;AA6SQ,YAAM,mBAAkB,SAAI,QAAQ,IAAI,yBAAyB,MAAzC,mBAA4C;AACpE,YAAM,eAAc,SAAI,QAAQ,IAAI,yBAAyB,MAAzC,mBAA4C;AAGhE,UAAI,iBAAiB;AACjB,cAAM,kBAAkB,MAAM,sCAAsC,iBAAiB,WAAW;AAChG,YAAI,gBAAgB,UAAU,cAAc;AACxC,gBAAM,IAAI,MAAM,gDAAgD;AAAA,QACpE,WAAW,gBAAgB,UAAU,gBAAgB;AACjD,gBAAMA,WAAU,IAAI,QAAQ;AAC5B,UAAAA,SAAQ;AAAA,YACJ;AAAA,YACA,GAAG;AAAA,UACP;AACA,UAAAA,SAAQ;AAAA,YACJ;AAAA,YACA,GAAG;AAAA,UACP;AACA,UAAAA,SAAQ;AAAA,YACJ;AAAA,YACA,GAAG;AAAA,UACP;AACA,iBAAO,IAAI,SAAS,gBAAgB,EAAE,QAAQ,KAAK,SAAAA,SAAQ,CAAC;AAAA,QAChE;AAEA,cAAM,eAAe,gBAAgB;AACrC,cAAM,cAAc,gBAAgB;AAEpC,cAAM,gBAAgB,iBAAiB;AACvC,cAAM,OAAO,GAAG;AAChB,cAAM,WAAW,MAAM,MAAM,MAAM;AAAA,UAC/B,SAAS;AAAA,YACL,gBAAgB;AAAA,YAChB,eAAe,YAAY;AAAA,UAC/B;AAAA,QACJ,CAAC;AACD,YAAI,SAAS,IAAI;AACb,gBAAM,gBAAgB,MAAM,oBAAoB,WAAW;AAC3D,gBAAM,OAAO,MAAM,SAAS,KAAK;AACjC,gBAAM,eAAe;AAAA,YACjB,UAAU;AAAA,YACV;AAAA,YACA,oBAAoB,cAAc;AAAA,YAClC;AAAA,UACJ;AAEA,gBAAMA,WAAU,IAAI,QAAQ;AAC5B,UAAAA,SAAQ;AAAA,YACJ;AAAA,YACA,GAAG,4BAA4B;AAAA,UACnC;AACA,UAAAA,SAAQ;AAAA,YACJ;AAAA,YACA,GAAG,6BAA6B;AAAA,UACpC;AACA,UAAAA,SAAQ,OAAO,gBAAgB,kBAAkB;AACjD,iBAAO,IAAI,SAAS,KAAK,UAAU,YAAY,GAAG;AAAA,YAC9C,QAAQ;AAAA,YACR,SAAAA;AAAA,UACJ,CAAC;AAAA,QACL,WAAW,SAAS,WAAW,KAAK;AAChC,gBAAMA,WAAU,IAAI,QAAQ;AAC5B,UAAAA,SAAQ;AAAA,YACJ;AAAA,YACA,GAAG;AAAA,UACP;AACA,UAAAA,SAAQ;AAAA,YACJ;AAAA,YACA,GAAG;AAAA,UACP;AACA,UAAAA,SAAQ;AAAA,YACJ;AAAA,YACA,GAAG;AAAA,UACP;AACA,iBAAO,IAAI,SAAS,MAAM;AAAA,YACtB,QAAQ;AAAA,YACR,SAAAA;AAAA,UACJ,CAAC;AAAA,QACL,OAAO;AACH,iBAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,IAAI,CAAC;AAAA,QAC7C;AAAA,MACJ;AAEA,YAAMA,WAAU,IAAI,QAAQ;AAC5B,MAAAA,SAAQ,OAAO,cAAc,GAAG,8EAA8E;AAC9G,MAAAA,SAAQ,OAAO,cAAc,GAAG,+EAA+E;AAC/G,MAAAA,SAAQ,OAAO,cAAc,GAAG,+EAA+E;AAC/G,aAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC7C;AAAA;AAEA,WAAe,iBAAiB,KAAkB;AAAA;AAvYtD;AA4YQ,YAAM,QAAO,6BAAM,2BAA0B,KAAK,wBAAwB,GAAG,IAAI;AACjF,UAAI,CAAC,MAAM;AACP,gBAAQ,MAAM,oCAAoC;AAClD,eAAO,IAAI,SAAS,oBAAoB,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC3D;AAEA,YAAM,gBAAe,SAAI,QAAQ,IAAI,yBAAyB,MAAzC,mBAA4C;AACjE,UAAI,CAAC,cAAc;AACf,cAAMA,WAAU,IAAI,QAAQ;AAC5B,QAAAA,SAAQ,OAAO,YAAY,IAAI;AAC/B,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG;AAAA,QACP;AACA,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG;AAAA,QACP;AACA,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG;AAAA,QACP;AACA,eAAO,IAAI,SAAS,MAAM;AAAA,UACtB,QAAQ;AAAA,UACR,SAAAA;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,YAAM,eAAc,SAAI,QAAQ,IAAI,yBAAyB,MAAzC,mBAA4C;AAChE,YAAM,kBAAkB,MAAM,sCAAsC,cAAc,WAAW;AAC7F,UAAI,gBAAgB,UAAU,cAAc;AACxC,gBAAQ,MAAM,gDAAgD;AAC9D,eAAO,IAAI,SAAS,oBAAoB,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC3D,WAAW,gBAAgB,UAAU,gBAAgB;AACjD,cAAMA,WAAU,IAAI,QAAQ;AAC5B,QAAAA,SAAQ,OAAO,YAAY,IAAI;AAC/B,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG;AAAA,QACP;AACA,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG;AAAA,QACP;AACA,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG;AAAA,QACP;AACA,eAAO,IAAI,SAAS,MAAM;AAAA,UACtB,QAAQ;AAAA,UACR,SAAAA;AAAA,QACJ,CAAC;AAAA,MACL,OAAO;AACH,cAAMA,WAAU,IAAI,QAAQ;AAC5B,QAAAA,SAAQ,OAAO,YAAY,IAAI;AAC/B,eAAO,IAAI,SAAS,MAAM;AAAA,UACtB,QAAQ;AAAA,UACR,SAAAA;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ;AAAA;AAEA,WAAe,kBAAkB,KAAkB;AAAA;AA1cvD;AA2cQ,YAAM,gBAAe,SAAI,QAAQ,IAAI,yBAAyB,MAAzC,mBAA4C;AACjE,UAAI,CAAC,cAAc;AACf,cAAMA,WAAU,IAAI,QAAQ;AAC5B,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG;AAAA,QACP;AACA,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG;AAAA,QACP;AACA,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG;AAAA,QACP;AACA,eAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,KAAK,SAAAA,SAAQ,CAAC;AAAA,MACtD;AAEA,YAAM,gBAAgB,iBAAiB;AACvC,YAAM,oBAAoB,qBAAqB;AAC/C,YAAM,aAAa,EAAE,eAAe,aAAa;AACjD,YAAM,MAAM,GAAG;AACf,YAAM,WAAW,MAAM,MAAM,KAAK;AAAA,QAC9B,QAAQ;AAAA,QACR,MAAM,KAAK,UAAU,UAAU;AAAA,QAC/B,SAAS;AAAA,UACL,gBAAgB;AAAA,UAChB,eAAe,YAAY;AAAA,QAC/B;AAAA,MACJ,CAAC;AAED,UAAI,CAAC,SAAS,IAAI;AACd,gBAAQ;AAAA,UACJ;AAAA,UACA,SAAS;AAAA,UACT,SAAS;AAAA,QACb;AAAA,MACJ;AACA,YAAMA,WAAU,IAAI,QAAQ;AAC5B,MAAAA,SAAQ,OAAO,cAAc,GAAG,8EAA8E;AAC9G,MAAAA,SAAQ,OAAO,cAAc,GAAG,+EAA+E;AAC/G,MAAAA,SAAQ,OAAO,cAAc,GAAG,+EAA+E;AAC/G,aAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,KAAK,SAAAA,SAAQ,CAAC;AAAA,IACtD;AAAA;AAEA,WAAe,oBAAoB,KAAkB;AAAA;AAxfzD;AAyfQ,YAAM,mBAAkB,SAAI,QAAQ,IAAI,yBAAyB,MAAzC,mBAA4C;AACpE,YAAM,cAAc,IAAI,QAAQ,aAAa,IAAI,eAAe;AAEhE,UAAI,CAAC,iBAAiB;AAClB,cAAMA,WAAU,IAAI,QAAQ;AAC5B,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG;AAAA,QACP;AACA,eAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,KAAK,SAAAA,SAAQ,CAAC;AAAA,MACtD;AAEA,UAAI,CAAC,aAAa;AACd,eAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC7C;AAEA,YAAM,kBAAkB,MAAM,sCAAsC,iBAAiB,WAAW;AAChG,UAAI,gBAAgB,UAAU,cAAc;AACxC,cAAM,IAAI,MAAM,8CAA8C;AAAA,MAClE,WAAW,gBAAgB,UAAU,gBAAgB;AACjD,eAAO,IAAI,SAAS,gBAAgB,EAAE,QAAQ,IAAI,CAAC;AAAA,MACvD;AAEA,YAAM,eAAe,gBAAgB;AACrC,YAAM,cAAc,gBAAgB;AAEpC,YAAM,gBAAgB,iBAAiB;AACvC,YAAM,OAAO,GAAG;AAChB,YAAM,WAAW,MAAM,MAAM,MAAM;AAAA,QAC/B,SAAS;AAAA,UACL,gBAAgB;AAAA,UAChB,eAAe,YAAY;AAAA,QAC/B;AAAA,MACJ,CAAC;AAED,UAAI,SAAS,IAAI;AACb,cAAM,gBAAgB,MAAM,oBAAoB,WAAW;AAC3D,cAAM,OAAO,MAAM,SAAS,KAAK;AACjC,cAAM,eAAe;AAAA,UACjB,UAAU;AAAA,UACV;AAAA,UACA,oBAAoB,cAAc;AAAA,UAClC;AAAA,QACJ;AAEA,cAAMA,WAAU,IAAI,QAAQ;AAC5B,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG,4BAA4B;AAAA,QACnC;AACA,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG,6BAA6B;AAAA,QACpC;AACA,QAAAA,SAAQ;AAAA,UACJ;AAAA,UACA,GAAG,6BAA6B;AAAA,QACpC;AACA,QAAAA,SAAQ,OAAO,gBAAgB,kBAAkB;AACjD,eAAO,IAAI,SAAS,KAAK,UAAU,YAAY,GAAG;AAAA,UAC9C,QAAQ;AAAA,UACR,SAAAA;AAAA,QACJ,CAAC;AAAA,MACL,WAAW,SAAS,WAAW,KAAK;AAChC,eAAO,IAAI,SAAS,MAAM;AAAA,UACtB,QAAQ;AAAA,QACZ,CAAC;AAAA,MACL,OAAO;AACH,eAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC7C;AAAA,IACJ;AAAA;AAEA,WAAS,gBAAgB,KAAkB,EAAE,OAAO,GAAiC;AACjF,QAAI,OAAO,SAAS,SAAS;AACzB,aAAO,gBAAgB,GAAG;AAAA,IAC9B,WAAW,OAAO,SAAS,UAAU;AACjC,aAAO,iBAAiB,GAAG;AAAA,IAC/B,WAAW,OAAO,SAAS,YAAY;AACnC,aAAO,mBAAmB,GAAG;AAAA,IACjC,WAAW,OAAO,SAAS,YAAY;AACnC,aAAO,mBAAmB,GAAG;AAAA,IACjC,WAAW,OAAO,SAAS,UAAU;AACjC,aAAO,iBAAiB,GAAG;AAAA,IAC/B,OAAO;AACH,aAAO,IAAI,SAAS,IAAI,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC3C;AAAA,EACJ;AAEA,WAAS,iBAAiB,KAAkB,EAAE,OAAO,GAAiC;AAClF,QAAI,OAAO,SAAS,UAAU;AAC1B,aAAO,kBAAkB,GAAG;AAAA,IAChC,WAAW,OAAO,SAAS,kBAAkB;AACzC,aAAO,oBAAoB,GAAG;AAAA,IAClC,OAAO;AACH,aAAO,IAAI,SAAS,IAAI,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC3C;AAAA,EACJ;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,EACJ;AACJ;AAEA,SAAS,cAAsB;AAC3B,QAAM,cAAc,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC;AAC7D,SAAO,MAAM,KAAK,WAAW,EACxB,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC,EAC1C,KAAK,EAAE;AAChB;AAEA,SAAS,gBAAgB,iBAAmC;AACxD,MAAI,CAAC,iBAAiB;AAClB,oCAAS,UAAU;AAAA,EAEvB,WAAW,gBAAgB,cAAc;AACrC,UAAM,YAAY,aAAa,qBAAqB,UAAU,gBAAgB,YAAY;AAC1F,oCAAS,SAAS;AAAA,EAEtB,WAAW,gBAAgB,qBAAqB;AAC5C,UAAM,cAAc,uCAAuC;AAC3D,QAAI,aAAa;AACb,YAAM,YAAY,aAAa,qBAAqB;AACpD,sCAAS,SAAS;AAAA,IAEtB,OAAO;AACH,cAAQ,KAAK,0CAA0C;AACvD,sCAAS,UAAU;AAAA,IACvB;AAAA,EACJ;AACJ;AAEO,SAAS,yCAA6D;AACzE,QAAM,MAAM,cAAc;AAC1B,MAAI,CAAC,KAAK;AACN,WAAO;AAAA,EACX;AAEA,MAAI;AACA,UAAM,SAAS,IAAI,IAAI,GAAG;AAC1B,WAAO,mBAAmB,OAAO,WAAW,OAAO,MAAM;AAAA,EAC7D,SAAS,GAAP;AACE,YAAQ,KAAK,gCAAgC;AAC7C,WAAO;AAAA,EACX;AACJ;AAOO,SAAS,gBAAoC;AAChD,QAAM,UAAM,wBAAQ,EAAE,IAAI,qBAAqB;AAC/C,MAAI,CAAC,KAAK;AACN,YAAQ,KAAK,4HAA4H;AACzI,WAAO;AAAA,EACX,OAAO;AACH,WAAO;AAAA,EACX;AACJ;","names":["response","headers"]}